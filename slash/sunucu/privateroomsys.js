const { PermissionsBitField, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, UserSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const db = require('croxydb');
const client = require("../../index.js");

module.exports = {
    name: "√∂zelodasistemi",
    description: "√ñzel oda sistemini a√ß veya kapat.",
    options: [
        {
            name: "i≈ülem",
            description: "Sistemi a√ß veya kapat",
            type: 3, 
            required: true,
            choices: [
                { name: "A√ß", value: "a√ß" },
                { name: "Kapat", value: "kapat" }
            ]
        }
    ],

    run: async (client, interaction) => {
        const i≈ülem = interaction.options.getString("i≈ülem");

        if (interaction.user.id !== interaction.guild.ownerId) {
            return interaction.reply('Bu komutu sadece sunucu sahibi kullanabilir.');
        }

        const privateRoomCategoryId = await db.get(`privateRoomCategory_${interaction.guild.id}`);
        const privateRoomChannelId = await db.get(`privateRoomChannel_${interaction.guild.id}`);

        if (i≈ülem === 'a√ß') {
            if (privateRoomCategoryId || privateRoomChannelId) {
                return interaction.reply('√ñzel oda sistemi zaten a√ßƒ±k.');
            }

            const category = await interaction.guild.channels.create({
                name: '√ñzel Oda',
                type: ChannelType.GuildCategory
            });

            const channel = await interaction.guild.channels.create({
                name: 'üéß √ñzel Oda Olu≈ütur',
                type: ChannelType.GuildVoice,
                parent: category.id
            });

            await db.set(`privateRoomCategory_${interaction.guild.id}`, category.id);
            await db.set(`privateRoomChannel_${interaction.guild.id}`, channel.id);

            interaction.reply('√ñzel oda sistemi ba≈üarƒ±yla kuruldu!');
        } else if (i≈ülem === 'kapat') {
            if (!privateRoomCategoryId && !privateRoomChannelId) {
                return interaction.reply('√ñzel oda sistemi zaten kapalƒ±.');
            }

            if (privateRoomCategoryId) {
                const category = interaction.guild.channels.cache.get(privateRoomCategoryId);
                if (category) {
                    category.children.cache.forEach(async (channel) => {
                        await db.delete(`privateRoom_${channel.id}`);
                        await channel.delete().catch(console.error);
                    });
                    await category.delete().catch(console.error);
                }
                await db.delete(`privateRoomCategory_${interaction.guild.id}`);
            }

            if (privateRoomChannelId) {
                const channel = interaction.guild.channels.cache.get(privateRoomChannelId);
                if (channel) {
                    try {
                        await channel.delete();
                    } catch (error) {
                        if (error.code === 10003) {
                            console.log('Kanal zaten silinmi≈ü.');
                        } else {
                            console.error('Kanal silinirken bir hata olu≈ütu:', error);
                        }
                    }
                }
                await db.delete(`privateRoomChannel_${interaction.guild.id}`);
            }

            interaction.reply('√ñzel oda sistemi kapatƒ±ldƒ± ve t√ºm odalar silindi.');
        } else {
            interaction.reply('Ge√ßersiz i≈ülem! "a√ß" veya "kapat" se√ßeneklerinden birini kullanƒ±n.');
        }
    },
};
